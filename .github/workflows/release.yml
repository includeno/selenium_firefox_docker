# https://docs.github.com/en/actions/guides
# CI name , it will display on github's action page menu
name: Github Action Release
# trigger on which this CI should be run
on: # push operation is operate
  push:
    # here since my repository branch is named `main` , you should follow your own repository like `master`
    branches: [java_springboot]
# CI enviroment settings
env:
  RELEASE_VERSION: "1.0" # version
  TAG_NAME: "github_action_test_java" #tag 只能小写开头
jobs:
  release:
    name: 发布新版本
    runs-on: ubuntu-latest # use latest ubuntu to run the job
    # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      # here are some step followed , each step must have `uses` or `run` key , for CI to run
      # other key like `name`,`with`,`env` is optional
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest requests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Get latest version
        run: |
          python -m pip install requests
          python latest_version_firefox.py
      - name: Output Docker info
        run: docker info
      - name: Sets build date
        run: echo "BUILD_DATE=$(date '+%Y%m%d')" >> $GITHUB_ENV
      - name: tail from FIREFOX_ESR_VERSION to GITHUB_ENV
        run: tail ./FIREFOX_ESR_VERSION >> $GITHUB_ENV
      - name: set tag GECKODRIVER_VERSION version
        run: tail ./GECKODRIVER_VERSION >> $GITHUB_ENV
      #zip the project files
      - name: Zip project # This would actually build your project, using zip for an example artifact
        run: |
          zip -q -r firefox_${{ env.FIREFOX_ESR_VERSION }}_geckodriver_${{ env.GECKODRIVER_VERSION }}-production.zip .
      
      - name: check firefox_version
        run:  |
          echo ${{env.FIREFOX_ESR_VERSION}}
      - name: check geckodriver_version
        run:  |
          echo ${{env.GECKODRIVER_VERSION}}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1 #https://github.com/actions/create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: firefox_${{ env.FIREFOX_ESR_VERSION }}_geckodriver_${{ env.GECKODRIVER_VERSION }}
          release_name: firefox_${{ env.FIREFOX_ESR_VERSION }}_geckodriver_${{ env.GECKODRIVER_VERSION }}
          body: |
            Changes in this Release
            - firefox: ${{ env.FIREFOX_ESR_VERSION }}
            - geckodriver: ${{ env.GECKODRIVER_VERSION }}
          draft: false
          prerelease: false
        continue-on-error: true
      
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1 #https://github.com/actions/upload-release-asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: firefox_${{ env.FIREFOX_ESR_VERSION }}_geckodriver_${{ env.GECKODRIVER_VERSION }}-production.zip
          asset_name: firefox_${{ env.FIREFOX_ESR_VERSION }}_geckodriver_${{ env.GECKODRIVER_VERSION }}-production.zip
          asset_content_type: application/zip
        continue-on-error: true
      
      - name: The job has succeeded
        if: ${{ success() }}
        run: echo "新版本发布成功"
      - name: The job has succeeded
        if: ${{ failure() }}
        run: echo "存在版本号相同的版本"
